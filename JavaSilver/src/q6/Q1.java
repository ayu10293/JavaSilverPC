package q6;

 class Q1 {
	void mathod() {}
}
 class YY extends Q1{
	//public void method() {}アクセス修飾子 public は、元のメソッド（Q1 の method()）よりも広いアクセス範囲なので許可されています。
	//public int method() { return 0; }オーバーライドする際は、戻り値の型を一致させる必要があります。元の method() は void を戻すため、int 型を返すこのメソッドはオーバーライドとして認められません。戻り値の型が異なると、別のメソッドと見なされます。
	//void method(int i, String s) {}これはオーバーロード（同じメソッド名で異なる引数リストを持つメソッドの定義）です。元のメソッドとシグネチャが異なるため、これは新しいメソッドとして扱われ、問題なく定義できます。
	//void method(Object o) {}これもオーバーロードです。引数の型が異なるので、新しいメソッドとして認識されます。
	//protected void method() {}protected は、元の package-private よりも広いアクセス範囲です。オーバーライドする際、アクセス修飾子は元のメソッドよりも広いか同じであれば問題ないため、この定義は許可されます。
	//private void method() {}オーバーライドする際、アクセス修飾子を狭めることはできません。private は最も狭いアクセス範囲のため、元のメソッドよりもアクセス範囲が狭くなるので、この定義は許可されません。
}
/*オーバーライドの条件
1.戻り値の型が同じであること。
2.メソッド名が同じであること。
3.引数（パラメータ）の型と数が同じであること。
4.アクセス修飾子は、元のメソッドと同じか、より広いものであること。
5.メソッドが同じ例外を投げるか、より少ない例外を投げること。*/